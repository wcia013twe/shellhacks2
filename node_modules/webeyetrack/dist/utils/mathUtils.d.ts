import { Matrix } from 'ml-matrix';
import { Matrix as MediaPipeMatrix, NormalizedLandmark } from '@mediapipe/tasks-vision';
import * as tf from '@tensorflow/tfjs';
import { Point } from '../types';
export declare function computeAffineMatrixML(src: number[][], dst: number[][]): number[][];
export declare function applyAffineMatrix(A: tf.Tensor, V: tf.Tensor): tf.Tensor;
/**
 * Estimates a 3x3 homography matrix from 4 point correspondences.
 */
export declare function computeHomography(src: Point[], dst: Point[]): number[][];
/**
 * Apply a homography matrix to a point.
 */
export declare function applyHomography(H: number[][], pt: number[]): number[];
/**
 * Applies homography to warp a source ImageData to a target rectangle.
 */
export declare function warpImageData(srcImage: ImageData, H: number[][], outWidth: number, outHeight: number): ImageData;
export declare function cropImageData(source: ImageData, x: number, y: number, width: number, height: number): ImageData;
export declare function obtainEyePatch(frame: ImageData, faceLandmarks: Point[], facePaddingCoefs?: [number, number], faceCropSize?: number, dstImgSize?: [number, number]): ImageData;
export declare function translateMatrix(matrix: MediaPipeMatrix): Matrix;
export declare function createPerspectiveMatrix(aspectRatio: number): Matrix;
export declare function createIntrinsicsMatrix(width: number, height: number, fovX?: number): Matrix;
export declare function estimateFaceWidth(faceLandmarks: Point[]): number;
export declare function convertUvToXyz(perspectiveMatrix: Matrix, u: number, v: number, zRelative: number): [number, number, number];
export declare function imageShiftTo3D(shift2d: [number, number], depthZ: number, K: Matrix): [number, number, number];
export declare function transform3DTo3D(point: [number, number, number], rtMatrix: Matrix): [number, number, number];
export declare function transform3DTo2D(point3D: [number, number, number], K: Matrix): [number, number];
export declare function partialProcrustesTranslation2D(canonical2D: [number, number][], detected2D: [number, number][]): [number, number];
export declare function refineDepthByRadialMagnitude(finalProjectedPts: [number, number][], detected2D: [number, number][], oldZ: number, alpha?: number): number;
export declare function faceReconstruction(perspectiveMatrix: Matrix, faceLandmarks: [number, number][], faceRT: Matrix, intrinsicsMatrix: Matrix, faceWidthCm: number, videoWidth: number, videoHeight: number, initialZGuess?: number): [Matrix, [number, number, number][]];
export declare function computeFaceOrigin3D(metricFace: [number, number, number][]): [number, number, number];
export declare function matrixToEuler(matrix: Matrix, degrees?: boolean): [number, number, number];
export declare function eulerToMatrix(pitch: number, yaw: number, roll: number, degrees?: boolean): Matrix;
export declare function getHeadVector(tfMatrix: Matrix): number[];
export declare function computeEAR(eyeLandmarks: NormalizedLandmark[], side: 'left' | 'right'): number;
